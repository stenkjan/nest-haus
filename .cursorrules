# Project Rules for Nest-Haus Configurator

## Code Quality & Documentation
- Make sure to include the indexed documentations of the languages and tools we use when needed: React, Next.js, Prisma, Redis, PostgreSQL
- Always try to keep the codebase slim and the code you generate concise
- Don't change any content or design properties that are not directly related to a prompt, if unsure, always ask
- Documentation in /docs must be updated after every commit, using the predefined .md files and continuing them as needed
- Use GitHub Actions or equivalent CI to continuously generate and update documentation

## Development Workflow
- Check for existing running servers (localhost:3000) before running a new server, we have hot reload in place
- Fill out the documentation in /docs after every commit, use the predefined .md files and continue them
- Use GitHub actions to continuously document

## Terminal & PowerShell Guidelines
- **Python Access**: Python is installed via winget at standard Windows location
- **PowerShell Syntax**: Never use `&&` for command chaining (not supported in PowerShell)
- **Use PowerShell operators**: Use `;` for command separation or separate commands
- **Call external executables**: Use `&` operator: `& "path\to\executable.exe" args`
- **Path format**: Use Windows paths with backslashes or forward slashes
- **Package management**: Use `python -m pip install package` for Python packages
- **Example commands**:
  ```powershell
  # ✅ Correct PowerShell syntax
  cd preiskalkulation; python read_prices.py
  python -m pip install pandas openpyxl
  & "C:\Program Files\Python\python.exe" --version
  
  # ❌ Incorrect (Unix-style, doesn't work in PowerShell)
  cd preiskalkulation && python read_prices.py
  ```

## Testing & CI
- All integration tests must be automated and run as part of the CI pipeline
- Integration tests should be cleaned up after execution to avoid redundant or stale test artifacts
- Test files, data, and temporary resources created during tests must be removed or reset after each test run
- Periodically review and remove obsolete or redundant tests to keep the test suite lean
- Ensure that test coverage is maintained without accumulating unnecessary or duplicate tests

## Architecture Constraints
- Backend tracking system (Redis + PostgreSQL) must remain intact for analytics
- Session management and analytics should not be disrupted but should be non-blocking
- Price calculations must be CLIENT-SIDE for instant response times
- State management should use the established store pattern (Zustand)
- API calls should be optimistic and fail-safe (don't block user experience)

## Integration Guidelines
- New configurator components must integrate with useConfiguratorStore and useCartStore
- User selections should be tracked via session APIs as background tasks (non-blocking)
- Cart functionality should remain compatible across the app
- Maintain backward compatibility during migrations
- Prioritize instant user feedback over server synchronization

## Folder Structure Rules (React/Next.js Best Practice)
- **Route-specific code** (components, types, hooks, data, core logic) must be co-located inside the relevant route folder under `src/app/ROUTE/`
- **Shared/global components** must be placed in `src/components/`
- **Shared hooks** must be placed in `src/hooks/`
- **Global state management** (e.g., Zustand stores) must be placed in `src/store/`
- **Service logic** (e.g., Prisma, Redis clients) must be placed in `src/lib/`
- **Shared types/interfaces** must be placed in `src/types/`
- **Shared constants** must be placed in `src/constants/`
- **Context providers** must be placed in `src/contexts/`
- **Do NOT place non-route files directly in `src/app/`**. Only route folders and route-specific files (e.g., `page.tsx`, `layout.tsx`) are allowed there
- **If a component is only used by a single route, keep it in that route's folder.** If it is used in multiple routes, move it to `src/components/`

## Performance & Rendering Strategy

### **Balanced SSR/Client Architecture**
**PRIORITY: Optimize for both SEO and User Experience**

#### SSR-First for Content Pages
- **Marketing pages, blogs, documentation**: Full SSR for SEO and Core Web Vitals
- **Landing pages and product pages**: Server-rendered with minimal client hydration
- **Static content**: Use static generation when possible

#### Client-First for Interactive Applications
- **Configurator and dynamic tools**: Client-side for instant feedback and complex state
- **User dashboards and forms**: Client-side for real-time validation and updates
- **Shopping cart and checkout**: Client-side for seamless user experience

#### Hybrid Pattern Implementation
```tsx
// ✅ Page Router (SSR for SEO)
export default function ConfiguratorPage() {
  return <ConfiguratorClient />;
}

// ✅ Client Component (Instant interactions)
'use client';
export default function ConfiguratorClient() {
  // Handle: real-time price updates, selections, state management
}
```

### **Client-Side Performance Rules**
- **Price calculations**: Always client-side for sub-100ms response times
- **Form validation**: Client-side with server confirmation
- **State updates**: Optimistic updates with background sync
- **API calls**: Non-blocking, fail-safe, with graceful degradation

### **Server-Side Integration**
- **Session tracking**: Background tasks that don't block UI
- **Data persistence**: Opportunistic saves without blocking user flow
- **Analytics**: Fire-and-forget tracking events

## Responsive Design Guidelines
- Use Tailwind and Medium's responsive design system in combination
- Prefer relative units (em, vh, vw) over fixed pixel sizes
- Set max-width of 1144px for descriptive content (e.g. navbar)
- No width restrictions for main site content
- Implement mobile view switch at 600-700px using window.innerWidth
- Detect mobile access and differentiate between WebKit (iOS) and Android
- Handle WebKit-specific requirements:
  - Hide address bar appropriately
  - Manage nested scrolling containers carefully due to WebKit limitations
- Use Tailwind's responsive classes for consistent breakpoint handling
- Implement fluid typography using clamp() for dynamic text sizing
- Ensure all interactive elements have minimum touch target size of 44x44px
- Test layouts across standard breakpoints (sm: 640px, md: 768px, lg: 1024px, xl: 1280px)
- Maintain aspect ratios for media content using aspect-ratio utility
- Use CSS Grid and Flexbox for responsive layouts instead of fixed dimensions

## Server-Side Rendering (SSR) & Client-Side Guidelines
**BALANCED APPROACH: SSR for content, Client-side for interactions**

### When to Use SSR (Server Components)
- **Static content pages**: About, services, blog posts
- **SEO-critical pages**: Landing pages, product showcases
- **Initial page loads**: For better Core Web Vitals
- **Content that doesn't change frequently**

### When to Use Client-Side ("use client")
- **Interactive applications**: Configurators, calculators, dynamic forms
- **Real-time features**: Live updates, instant feedback
- **Complex state management**: Multi-step processes, shopping carts
- **User-specific content**: Dashboards, personalized experiences
- **Third-party integrations**: Maps, analytics, chat widgets

### Image Optimization Guidelines
- **Vercel Blob Images**: Use server components with Next.js Image component for optimal performance
- **Static images**: Always use Next.js `Image` component with proper sizing
- **Dynamic images**: Server-render when possible, client-render only for user-uploaded content

### Performance Requirements
- **Static Generation**: Prefer static generation (`generateStaticParams`) for predictable content
- **Streaming**: Use React Suspense for progressive loading of server components
- **Client Bundle Size**: Keep under 250KB for interactive components
- **Response Times**: <100ms for price calculations, <300ms for form submissions

# DOM Features & Sizing (React/Next.js projects)
- For any DOM feature or sizing communication between layout and page (e.g., scroll handling, dynamic sizing), always use a React context to provide refs or state.
- Never use querySelector, getElementById, or direct DOM traversal for such communication.
- This context-based approach is the default and required for all such requirements in this project.

## Landing Page Image Handling Rules

**CRITICAL: Landing Page Images (src/app/page.tsx) ONLY**

When working with background images on the landing page, ALWAYS use this exact pattern:

### Required Structure:
```tsx
// Landing page specific image styling - applies to all 8 images
const landingImageStyle = {
  objectPosition: 'center center',
  transform: 'scale(1.05)',
  transformOrigin: 'center center',
};

// Section with 16:9 aspect ratio constraint
<section key={section.id} className="relative w-full overflow-hidden" style={{ aspectRatio: '16/9' }}>
  <div className="absolute inset-0 w-full h-full">
    <Image
      src={section.image}
      alt={section.h1}
      fill
      className="object-cover"
      style={landingImageStyle}
      unoptimized
      priority={section.id === 1}
    />
  </div>
</section>
```

### Rules:
- ✅ ALWAYS maintain 16:9 aspect ratio using `style={{ aspectRatio: '16/9' }}` on section
- ✅ ALWAYS use `unoptimized` prop (for future Vercel blob compatibility)
- ✅ ALWAYS use component-level `landingImageStyle` object (not global CSS)
- ✅ ALWAYS apply same styling to ALL 8 landing page images
- ✅ NEVER add overlays unless specifically requested
- ❌ NEVER use `h-screen` on landing page sections (conflicts with 16:9)
- ❌ NEVER apply this pattern to other pages (konfigurator, etc.)

### Future-Proof:
This pattern works with any image source (current files or future Vercel blob URLs).

## Comprehensive Image Handling System Rules

**CRITICAL: Unified Image Architecture for Optimal Performance**

### **1. Default Component Choice**
- ✅ **ALWAYS use `HybridBlobImage`** for any new image implementation
- ✅ This component automatically selects the best strategy (SSR/Client)
- ✅ Provides optimal balance of SEO, performance, and user experience
- ❌ DO NOT create new image components without architectural approval

### **2. Image Component Selection Guide**

#### Use HybridBlobImage (Default - 95% of cases):
```tsx
import { HybridBlobImage } from '@/components/images';

// Auto-strategy selection based on context
<HybridBlobImage 
  path="image-name"
  strategy="auto"
  isAboveFold={boolean}
  isCritical={boolean}
  isInteractive={boolean}
  alt="Descriptive text"
/>
```

#### Use ServerBlobImage (SSR-Critical cases):
```tsx
// Only for server components with confirmed SSR needs
<ServerBlobImage
  path="static-content"
  enableSSRFetch={true}
  priority={true}
  alt="Static Content"
/>
```

#### Use ClientBlobImage (Legacy/Specific cases):
```tsx
// Only for specific client-side requirements
<ClientBlobImage
  path="dynamic-content"
  enableCache={true}
  enableMobileDetection={true}
  alt="Dynamic Content"
/>
```

### **3. Performance Optimization Rules**

#### Caching Strategy (Multi-Level):
- **Memory Cache**: Image path resolution (ImageManager)
- **Session Cache**: Blob URLs (1 hour TTL)
- **Server Cache**: API responses (1 hour TTL)
- **Browser Cache**: Next.js optimization (24 hours TTL)

#### Loading Strategy:
- **Above-fold/Critical**: `strategy="ssr"` + `priority={true}`
- **Interactive/Dynamic**: `strategy="client"` + caching enabled
- **Below-fold**: `strategy="auto"` + lazy loading
- **Gallery/Grid**: Progressive loading with intersection observer

#### Required Image Props:
- ✅ **ALWAYS set `alt` attribute** for accessibility
- ✅ **ALWAYS set appropriate `sizes`** for responsive images
- ✅ **ALWAYS set `priority={true}`** for above-fold critical images
- ✅ **ALWAYS use aspect ratios** to prevent layout shift

### **4. API Route Optimization**

#### Image API (`/api/images`):
- **Caching**: Server-side with 1-hour TTL
- **Fallbacks**: Semantic placeholders for missing images
- **Extensions**: Auto-detection (.jpg, .jpeg, .png, .webp, .avif)
- **Error Handling**: Graceful degradation, never fail

#### Placeholder API (`/api/placeholder/[width]/[height]`):
- **SVG Generation**: Branded, semantic placeholders
- **Caching**: Immutable with long TTL
- **Customization**: Query params for context-aware messages

### **5. ImageManager Integration**

#### Required Usage:
```tsx
import { ImageManager } from '@/app/konfigurator/core/ImageManager';

// Path resolution with caching
const imagePath = ImageManager.getPreviewImage(configuration, view);

// Intelligent preloading
await ImageManager.preloadImages(configuration);

// Available views calculation
const views = ImageManager.getAvailableViews(configuration);
```

#### Caching Rules:
- **Memoization**: All path calculations are cached
- **Deduplication**: Prevent redundant API calls
- **Smart Updates**: Only refresh when configuration changes
- **Preloading**: Predictive loading based on user behavior

### **6. Configuration Examples**

#### Landing Page Hero (Critical):
```tsx
<HybridBlobImage
  path="hero-image"
  strategy="ssr"
  isAboveFold={true}
  isCritical={true}
  priority={true}
  alt="NEST Haus Hero"
  sizes="100vw"
  style={{ aspectRatio: '16/9' }}
/>
```

#### Configurator Preview (Interactive):
```tsx
<HybridBlobImage
  path={dynamicImagePath}
  strategy="client"
  isInteractive={true}
  enableCache={true}
  alt="Configuration Preview"
  sizes="(max-width: 768px) 100vw, 70vw"
  quality={85}
/>
```

#### Gallery Image (Auto-Optimized):
```tsx
<HybridBlobImage
  path="gallery-image"
  strategy="auto"
  isAboveFold={index < 2}
  isCritical={index === 0}
  alt="Gallery Image"
  loading={index < 2 ? 'eager' : 'lazy'}
/>
```

### **7. Error Handling & Fallbacks**

#### Graceful Degradation Hierarchy:
1. **Exact image match** from blob storage
2. **Fallback with default material/size**
3. **Final default image** from constants
4. **Semantic placeholder** with context
5. **Basic placeholder** as last resort

#### Error Boundaries:
- **Never block user interactions** waiting for images
- **Always provide visual feedback** during loading
- **Log errors** in development, fail silently in production
- **Use semantic placeholders** that provide context

### **8. Next.js Configuration**

#### Required Image Settings:
```tsx
// next.config.ts
images: {
  dangerouslyAllowSVG: true,
  contentSecurityPolicy: "default-src 'self'; script-src 'none'; sandbox;",
  formats: ['image/webp', 'image/avif'],
  minimumCacheTTL: 60 * 60 * 24, // 24 hours
  deviceSizes: [640, 750, 828, 1080, 1200, 1920, 2048, 3840],
  imageSizes: [16, 32, 48, 64, 96, 128, 256, 384],
}
```

### **9. Performance Monitoring**

#### Required Metrics:
- **Loading Times**: Track image load performance
- **Cache Hit Rates**: Monitor caching effectiveness  
- **Error Rates**: Track failed image loads
- **Core Web Vitals**: Monitor LCP, CLS impact

#### Development Tools:
```tsx
// Debug image resolution
ImageManager.clearPreloadedImages();
ImageManager.getPreviewImage(config, 'exterior');

// Performance profiling
console.log('🖼️ Image loading metrics');
```

### **10. DO/DON'T Rules**

#### ✅ DO:
- Use `HybridBlobImage` for all new implementations
- Set proper `alt` text for accessibility
- Use `priority={true}` for above-fold critical images
- Implement responsive `sizes` attributes
- Cache frequently accessed images
- Preload predictable next images
- Use aspect ratios to prevent layout shift
- Monitor performance metrics

#### ❌ DON'T:
- Use client-side loading for critical above-fold content
- Skip accessibility attributes
- Load full-resolution images unnecessarily on mobile
- Block user interactions waiting for images
- Create redundant API calls
- Use fixed pixel sizes for responsive layouts
- Create new image components without approval
- Ignore error handling and fallbacks

### **11. Migration Requirements**

#### From Legacy Components:
```tsx
// OLD: Direct blob image usage
<ClientBlobImage path="image" />

// NEW: Optimized hybrid approach
<HybridBlobImage 
  path="image"
  strategy="auto"
  alt="Descriptive text"
/>
```

#### From Static Images:
```tsx
// OLD: Static Next.js Image
<Image src="/static/image.jpg" alt="..." />

// NEW: Blob-optimized with fallback
<HybridBlobImage 
  path="image-name"
  strategy="ssr"
  fallbackSrc="/static/image.jpg"
  alt="..."
/>
```

### **12. Documentation Requirements**

- **Update `/docs/IMAGE_OPTIMIZATION_GUIDE.md`** after any image system changes
- **Document performance impact** of new implementations
- **Provide usage examples** for common scenarios
- **Track breaking changes** and migration paths

## Error Handling & Debugging Guidelines
- **Client-side errors**: Log to console in development, use error boundaries in production
- **API failures**: Always have fallback states, don't block user experience  
- **State synchronization**: Use optimistic updates with conflict resolution
- **Performance monitoring**: Track response times and bundle sizes
- **Debugging**: Use structured logging with emojis for easy identification (🚀 🏪 💰 🔧)