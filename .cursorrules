# Project Rules for Nest-Haus Configurator

## Code Quality & Documentation
- Make sure to include the indexed documentations of the languages and tools we use when needed: React, Next.js, Prisma, Redis, PostgreSQL
- Always try to keep the codebase slim and the code you generate concise
- Don't change any content or design properties that are not directly related to a prompt, if unsure, always ask
- Documentation in /docs must be updated after every commit, using the predefined .md files and continuing them as needed
- Use GitHub Actions or equivalent CI to continuously generate and update documentation

## Development Workflow
- Check for existing running servers (localhost:3000) before running a new server, we have hot reload in place
- Fill out the documentation in /docs after every commit, use the predefined .md files and continue them
- Use GitHub actions to continuously document

## Testing & CI
- All integration tests must be automated and run as part of the CI pipeline
- Integration tests should be cleaned up after execution to avoid redundant or stale test artifacts
- Test files, data, and temporary resources created during tests must be removed or reset after each test run
- Periodically review and remove obsolete or redundant tests to keep the test suite lean
- Ensure that test coverage is maintained without accumulating unnecessary or duplicate tests

## Architecture Constraints
- Backend tracking system (Redis + PostgreSQL) must remain intact
- Session management and analytics should not be disrupted
- Price calculations must use existing PriceCalculator logic
- State management should use the established store pattern (Zustand)

## Integration Guidelines
- New configurator components must integrate with useConfiguratorStore and useCartStore
- All user selections must be tracked via the session APIs
- Cart functionality should remain compatible across the app
- Maintain backward compatibility during migrations

## Responsive Design Guidelines
- Use Tailwind and Medium's responsive design system in combination
- Prefer relative units (em, vh, vw) over fixed pixel sizes
- Set max-width of 11144px for descriptive content (e.g. navbar)
- No width restrictions for main site content
- Implement mobile view switch at 600-700px using window.innerWidth
- Detect mobile access and differentiate between WebKit (iOS) and Android
- Handle WebKit-specific requirements:
  - Hide address bar appropriately
  - Manage nested scrolling containers carefully due to WebKit limitations
- Use Tailwind's responsive classes for consistent breakpoint handling
- Implement fluid typography using clamp() for dynamic text sizing
- Ensure all interactive elements have minimum touch target size of 44x44px
- Test layouts across standard breakpoints (sm: 640px, md: 768px, lg: 1024px, xl: 1280px)
- Maintain aspect ratios for media content using aspect-ratio utility
- Use CSS Grid and Flexbox for responsive layouts instead of fixed dimensions