# Project Rules for Nest-Haus Configurator

## Code Quality & Documentation
- Make sure to include the indexed documentations of the languages and tools we use when needed: React, Next.js, Prisma, Redis, PostgreSQL
- Always try to keep the codebase slim and the code you generate concise
- Don't change any content or design properties that are not directly related to a prompt, if unsure, always ask
- Documentation in /docs must be updated after every commit, using the predefined .md files and continuing them as needed
- Use GitHub Actions or equivalent CI to continuously generate and update documentation

## Development Workflow
- Check for existing running servers (localhost:3000) before running a new server, we have hot reload in place
- Fill out the documentation in /docs after every commit, use the predefined .md files and continue them
- Use GitHub actions to continuously document

## Testing & CI
- All integration tests must be automated and run as part of the CI pipeline
- Integration tests should be cleaned up after execution to avoid redundant or stale test artifacts
- Test files, data, and temporary resources created during tests must be removed or reset after each test run
- Periodically review and remove obsolete or redundant tests to keep the test suite lean
- Ensure that test coverage is maintained without accumulating unnecessary or duplicate tests

## Architecture Constraints
- Backend tracking system (Redis + PostgreSQL) must remain intact
- Session management and analytics should not be disrupted
- Price calculations must use existing PriceCalculator logic
- State management should use the established store pattern (Zustand)

## Integration Guidelines
- New configurator components must integrate with useConfiguratorStore and useCartStore
- All user selections must be tracked via the session APIs
- Cart functionality should remain compatible across the app
- Maintain backward compatibility during migrations

## Responsive Design Guidelines
- Use Tailwind and Medium's responsive design system in combination
- Prefer relative units (em, vh, vw) over fixed pixel sizes
- Set max-width of 11144px for descriptive content (e.g. navbar)
- No width restrictions for main site content
- Implement mobile view switch at 600-700px using window.innerWidth
- Detect mobile access and differentiate between WebKit (iOS) and Android
- Handle WebKit-specific requirements:
  - Hide address bar appropriately
  - Manage nested scrolling containers carefully due to WebKit limitations
- Use Tailwind's responsive classes for consistent breakpoint handling
- Implement fluid typography using clamp() for dynamic text sizing
- Ensure all interactive elements have minimum touch target size of 44x44px
- Test layouts across standard breakpoints (sm: 640px, md: 768px, lg: 1024px, xl: 1280px)
- Maintain aspect ratios for media content using aspect-ratio utility
- Use CSS Grid and Flexbox for responsive layouts instead of fixed dimensions

## Landing Page Image Handling Rules

**CRITICAL: Landing Page Images (src/app/page.tsx) ONLY**

When working with background images on the landing page, ALWAYS use this exact pattern:

### Required Structure:
```tsx
// Landing page specific image styling - applies to all 8 images
const landingImageStyle = {
  objectPosition: 'center center',
  transform: 'scale(1.05)',
  transformOrigin: 'center center',
};

// Section with 16:9 aspect ratio constraint
<section key={section.id} className="relative w-full overflow-hidden" style={{ aspectRatio: '16/9' }}>
  <div className="absolute inset-0 w-full h-full">
    <Image
      src={section.image}
      alt={section.h1}
      fill
      className="object-cover"
      style={landingImageStyle}
      unoptimized
      priority={section.id === 1}
    />
  </div>
</section>
```

### Rules:
- ✅ ALWAYS maintain 16:9 aspect ratio using `style={{ aspectRatio: '16/9' }}` on section
- ✅ ALWAYS use `unoptimized` prop (for future Vercel blob compatibility)
- ✅ ALWAYS use component-level `landingImageStyle` object (not global CSS)
- ✅ ALWAYS apply same styling to ALL 8 landing page images
- ✅ NEVER add overlays unless specifically requested
- ❌ NEVER use `h-screen` on landing page sections (conflicts with 16:9)
- ❌ NEVER apply this pattern to other pages (konfigurator, etc.)

### Future-Proof:
This pattern works with any image source (current files or future Vercel blob URLs).